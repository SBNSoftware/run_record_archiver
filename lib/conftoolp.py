# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _conftoolp
else:
    import _conftoolp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class result_pair_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _conftoolp.result_pair_t_swiginit(self, _conftoolp.new_result_pair_t(*args))
    first = property(_conftoolp.result_pair_t_first_get, _conftoolp.result_pair_t_first_set)
    second = property(_conftoolp.result_pair_t_second_get, _conftoolp.result_pair_t_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _conftoolp.delete_result_pair_t

# Register result_pair_t in _conftoolp:
_conftoolp.result_pair_t_swigregister(result_pair_t)

def set_default_locale():
    return _conftoolp.set_default_locale()

def read_document(query_payload):
    return _conftoolp.read_document(query_payload)

def write_document(query_payload, json_document):
    return _conftoolp.write_document(query_payload, json_document)

def mark_document_readonly(query_payload):
    return _conftoolp.mark_document_readonly(query_payload)

def mark_document_deleted(query_payload):
    return _conftoolp.mark_document_deleted(query_payload)

def find_versions(query_payload):
    return _conftoolp.find_versions(query_payload)

def find_entities(query_payload):
    return _conftoolp.find_entities(query_payload)

def add_entity(query_payload):
    return _conftoolp.add_entity(query_payload)

def remove_entity(query_payload):
    return _conftoolp.remove_entity(query_payload)

def add_version_alias(query_payload):
    return _conftoolp.add_version_alias(query_payload)

def remove_version_alias(query_payload):
    return _conftoolp.remove_version_alias(query_payload)

def find_version_aliases(query_payload):
    return _conftoolp.find_version_aliases(query_payload)

def find_configurations(query_payload):
    return _conftoolp.find_configurations(query_payload)

def configuration_composition(query_payload):
    return _conftoolp.configuration_composition(query_payload)

def create_configuration(query_payload):
    return _conftoolp.create_configuration(query_payload)

def assign_configuration(query_payload):
    return _conftoolp.assign_configuration(query_payload)

def remove_configuration(query_payload):
    return _conftoolp.remove_configuration(query_payload)

def read_configuration(query_payload):
    return _conftoolp.read_configuration(query_payload)

def write_configuration(query_payload, json_document):
    return _conftoolp.write_configuration(query_payload, json_document)

def export_configuration(query_payload):
    return _conftoolp.export_configuration(query_payload)

def import_configuration(query_payload):
    return _conftoolp.import_configuration(query_payload)

def export_database(query_payload):
    return _conftoolp.export_database(query_payload)

def import_database(query_payload):
    return _conftoolp.import_database(query_payload)

def export_collection(query_payload):
    return _conftoolp.export_collection(query_payload)

def import_collection(query_payload):
    return _conftoolp.import_collection(query_payload)

def search_collection(query_payload):
    return _conftoolp.search_collection(query_payload)

def list_databases(query_payload):
    return _conftoolp.list_databases(query_payload)

def read_dbinfo(query_payload):
    return _conftoolp.read_dbinfo(query_payload)

def list_collections(query_payload):
    return _conftoolp.list_collections(query_payload)

def fhicl_to_json(fcl, filename):
    return _conftoolp.fhicl_to_json(fcl, filename)

def json_to_fhicl(jsn, filename):
    return _conftoolp.json_to_fhicl(jsn, filename)

def enable_trace():
    return _conftoolp.enable_trace()

